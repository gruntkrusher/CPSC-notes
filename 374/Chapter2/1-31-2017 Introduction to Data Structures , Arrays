#CPSC 374, 1/31/2017

ADTs - Abstract Data Types
  * a way of looking at data structures focusing on what it does and ignoring how it does he job
  * "a class considered wihtout regard to its implementation"
 
 Arrays
  * contiguous blocks of memory for homogeneous array (all elements are the same type)
  * Multidimensional
    - row-major or column-major order
    - array of arrays
  * As a data structure we usually want no empty cells (v. sparse arrays)
  * Algorithms
    - Insert
      + constant time
    - Search/Find
      + linear time
    - Delete
      + linear time 
    - Duplicates?
      + not much changes
      
  * Ordered Array
    - sores values in key sequence
    insert - find loc and move all others up
    delete - find loc and move all others down
    - insert is more expensive
    - delete is easier
    search - linear, as before, or...
     Binary Search - very powerful

  * Often
    - Best case: Sorted
    - Worst case: Reverse Sorted
    - Average case: Random

  * Bubble Sort
    - Comparisons: 1/2N^2-1/2N 
    - Swaps: 1/4N^2 - 1/4N
    - O(N^2)
    
  * Selection Sort
  
     int i , j, minIndx
     for (i=0; i < nElems-1; i++):
        minIndex = i
        for(j = i+1; j < nElems; j++):
           if (a[j] < a[minIndex]):
             minIndx = j
        swap(i, minIndx)
     // Far fewer swaps than Bubble Sort
     
   * Insertion Sort
      
      int i, j
      for( i=1; i < nElems; i++):
         long temp = a[i]
         j=i
         while ( j>0 && a[j-1] >= temp):
            a[j] = a[j-1]
            j--
         a[j] = temp
    
    In some languages, swaps(and copies) are "expensive" for typical records
       - references and pointers can reduce "cost"
       
    Choosing a "case"
       * Random data
          - leads to average behavior
          - in the real world, data tends not to be random
          
       * Best case
          - Data is (almost) sorted already
       
       * Worst case
          - Data is sorted in reverse order
          
Modified Bubble Sort
   - Check each loop to see if a swap was performed
      - if not, the data is sorted, break
      
Space & Stability
   - All of these sorts work "in place"
      * Consant space requirements
   - All are "stable"
      * Do not re-order data that have the same key

   
 Implementation?
 
 int max
 int count
 
 StackX(int size)
   long[] A = new long[size]
   max = size
   count = 0
 
 void push(long j)
   A[count] = j
   count++
 
 long pop()
   long ans = A[count]
   count--
   return ans
   
   
        
